######## 数据源连接池 ########
# 基本属性：数据源类型，驱动名称，JDBC连接串，数据库用户名，数据库密码
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/db?characterEncoding=utf8
spring.datasource.username=root
spring.datasource.password=123456
# 配置连接池初始化大小、最小、最大
spring.datasource.initialSize=5
spring.datasource.minIdle=5
spring.datasource.maxActive=20
# 配置获取连接等待超时的时间
spring.datasource.maxWait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.timeBetweenEvictionRunsMillis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.minEvictableIdleTimeMillis=300000
# 测试有效用的SQL Query
spring.datasource.validationQuery=SELECT 1 FROM DUAL
# 连接空闲时测试是否有效
spring.datasource.testWhileIdle=true
# 获取连接时测试是否有效
spring.datasource.testOnBorrow=false
# 归还连接时是否测试有效
spring.datasource.testOnReturn=false
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.poolPreparedStatements=true
maxPoolPreparedStatementPerConnectionSize=20
# 配置监控统计拦截的filters，去掉后监控界面sql将无法统计，stat表示已经可以使用监控过滤器，时结合定义一个过滤器，就可以用来监控数据库的使用情况。这里'wall'用于防火墙
spring.datasource.filters=stat,wall,log4j
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
# 合并多个DruidDataSource的监控数据
#spring.datasource.useGlobalDataSourceStat=true


######## JPA ########
spring.jpa.database=mysql
spring.jpa.show-sql=true
# Hibernate ddl auto (validate|create|create-drop|update)
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect


######## Redis ########
spring.redis.host=localhost
spring.redis.port=6379
spring.redis.pool.max-idle=8
spring.redis.pool.min-idle=0
spring.redis.pool.max-active=8
spring.redis.pool.max-wait=-1